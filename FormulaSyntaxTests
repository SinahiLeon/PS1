// <copyright file="FormulaSyntaxTests.cs" company="UofU-CS3500">
//   Copyright 2024 UofU-CS3500. All rights reserved.
// </copyright>
// <authors> Sinahi Leon </authors>
// <date> 1/8/2025 </date>

namespace CS3500.FormulaTests;

using CS3500.Formula2; // Change this using statement to use different formula implementations.

/// <summary>
///   <para>
///     The following class shows the basics of how to use the MSTest framework,
///     including:
///   </para>
///   <list type="number">
///     <item> How to catch exceptions. </item>
///     <item> How a test of valid code should look. </item>
///   </list>
/// </summary>
[TestClass]
public class FormulaSyntaxTests
{
    // --- Tests for One Token Rule ---

    /// <summary>
    ///   <para>
    ///     This test makes sure the right kind of exception is thrown
    ///     when trying to create a formula with no tokens.
    ///   </para>
    ///       <item>
    ///         We use the _ (discard) notation because the formula object
    ///         is not used after that point in the method.  Note: you can also
    ///         use _ when a method must match an interface but does not use
    ///         some of the required arguments to that method.
    ///       </item>
    ///       <item>
    ///         All methods should be documented, but perhaps not to the same extent
    ///         as this one.  The remarks here are for your educational
    ///         purposes (i.e., a developer would assume another developer would know these
    ///         items) and would be superfluous in your code.
    ///       </item>
    /// </summary>
    [TestMethod]
    [ExpectedException(typeof (FormulaFormatException) )]
    public void FormulaConstructor_TestNoTokens_Invalid( )
    {
        _ = new Formula( "" );  // note: it is arguable that you should replace "" with string.Empty for readability and clarity of intent (e.g., not a cut and paste error or a "I forgot to put something there" error).
    }

    [TestMethod]
    [ExpectedException(typeof(FormulaFormatException))]
    public void FormulaConstructor_TestStringEmpty_Invalid()
    {
        _ = new Formula(string.Empty);  // note: it is arguable that you should replace "" with string.Empty for readability and clarity of intent (e.g., not a cut and paste error or a "I forgot to put something there" error).
    }

    [TestMethod]
    public void FormulaConstructor_TestOneToken_Valid ( )
    {
        _ = new Formula("5");   // A number is a valid token
    }





    // --- Tests for Valid Token Rule ---
    [TestMethod}
    public void FormulaConstructor_TestValidTokenParenthesis_Valid( )
    {
    _ = new Formula("()");

[TestMethod}
    public void FormulaConstructor_TestValidTokenPlus_Valid( )
    {
    _ = new Formula("+");

[TestMethod}
    public void FormulaConstructor_TestValidTokenMinus_Valid( )
    {
    _ = new Formula("-");

[TestMethod}
    public void FormulaConstructor_TestValidTokenStar_Valid( )
    {
    _ = new Formula("*");

[TestMethod}
    public void FormulaConstructor_TestValidTokenForwardSlash_Valid( )
    {
    _ = new Formula("/");

[TestMethod}
    public void FormulaConstructor_TestValidVariable_Valid( )
    {
    _ = new Formula("Sinahi23");

[TestMethod}
    public void FormulaConstructor_TestValidTokenNumber_Valid( )
    {
    _ = new Formula("2025");

[TestMethod]
    [ExpectedException(typeof(FormulaFormatException))]
    public void FormulaConstructor_TestValidTokenSymbol_Invalid( )
    {
    _ = new Formula("%");    // Exception should be thrown for invalid token
    }


    // --- Tests for Closing Parenthesis Rule

    // --- Tests for Balanced Parentheses Rule




    // --- Tests for First Token Rule

    /// <summary>
    ///   <para>
    ///     Make sure a simple well formed formula is accepted by the constructor (the constructor
    ///     should not throw an exception).
    ///   </para>
    ///   <remarks>
    ///     This is an example of a test that is not expected to throw an exception, i.e., it succeeds.
    ///     In other words, the formula "1+1" is a valid formula which should not cause any errors.
    ///   </remarks>
    /// </summary>
    [TestMethod]
    public void FormulaConstructor_TestFirstTokenNumber_Valid( )
    {
        _ = new Formula( "1+1" );
    }

    [TestMethod]
    public void FormulaConstructor_TestFirstTokenVariable_Valid()
    {
        _ = new Formula( "Aa11" );
    }

    [TestMethod]
    public void FormulaConstructor_TestFirstTokenParenthesis_Valid()
    {
        _ = new Formula( "(5-5)" );
    }



    // --- Tests for  Last Token Rule ---

    // --- Tests for Parentheses/Operator Following Rule ---

    /// <summary>
    ///   <para>
    ///     Make sure a simple well formed formula is accepted by the constructor (the constructor
    ///     should not throw an exception).
    ///   </para>
    ///   <remarks>
    ///     This is an example of a test that is not expected to throw an exception, i.e., it succeeds.
    ///     In other words, the formula "1+1" is a valid formula which should not cause any errors.
    ///   </remarks>
    /// </summary>
    [TestMethod]
    public void FormulaConstructor_TestBasicParanthesis_Valid()
    {
        _ = new Formula("(1+1)");
    }

    // --- Tests for Extra Following Rule ---
}
